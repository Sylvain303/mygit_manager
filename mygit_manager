#!/bin/bash
#
# Usage:
#  mygit_manager create REPO_NAME
#  mygit_manager list
#  mygit_manager rm REPO_NAME
#  mygit_manager show REPO_NAME
#

# if you want to override this values
# export CONFFILE=some_file
# and define them inside some_file

REPO_VALID_REGEX='^[-a-zA-Z0-9_.]+$'
REPO_BASE_DIR=$HOME/repos/git

## override with your own config
[[ $0 != "$BASH_SOURCE" ]] && sourced=1 || sourced=0

if [[ $sourced -eq 0  ]] ; then
  scriptdir=$(dirname $(readlink -f "$0"))
else
  scriptdir=$(dirname $(readlink -f "$BASH_SOURCE"))
fi

# your export CONFFILE=some_file to override
if [[ -z "$CONFFILE" ]]
then
  CONFFILE="$scriptdir/mygit_manager.conf"
fi

loadconf() {
    local conffile="$1"
    if [[ -e "$conffile" ]]
    then
        source "$conffile"
        return 0
    fi
    return 0
}

die() {
  echo "${0}:error: $*" >&2
  exit 1
}

check_repo_name() {
  local name="$1"
  if ! echo "$name" | egrep "$REPO_VALID_REGEX" > /dev/null ; then
    die "'$name' contains invalid characters for a repository name"
  fi
  case "$name" in
    .*)
      die "Repository name must not start with '.'"
      ;;
    *)
      ;;
  esac
}

fail_if_repo() {
  local repo_name=$2
  local checkp="$REPO_BASE_DIR/$repo_name/branches"
  case $1 in
  exists|exist)
    [[ -d "$checkp" ]] && \
      die "There is already a repository named \"$repo_name\""
    ;;
  not_exists)
    [[ ! -d "$checkp" ]] && \
      die "Repository named \"$repo_name\" is missing"
    ;;
  *)
    die "argument '$1' not supported"
    ;;
  esac
  return 0
}

action_add() {
  local repo_name="$1"
  if [[ -z "$repo_name" ]] ; then
    die "Missing REPO_NAME argument"
  fi
  check_repo_name $repo_name

  # Reload config to evaluate url options again with ${repo_name} set
  #load_config

  fail_if_repo exists $repo_name

  local dest=$REPO_BASE_DIR/$repo_name
  set -e
    mkdir $dest
    git init --bare --quiet $dest
    mv $dest/hooks/post-update.sample $dest/hooks/post-update
  set +e

  echo "The \"$repo_name\" repository has been created."
  action_show $repo_name
}

# alias of add
action_create() {
  action_add "$@"
}

action_rm() {
  force=false
  if [[ "$1" == '-f' ]] ; then
    force=true
    shift
  fi

  local repo_name="$1"
  if [ -z "$repo_name" ] ; then
    die "Missing REPO_NAME argument"
  fi
  check_repo_name $repo_name

  local path=$REPO_BASE_DIR/$repo_name
  if [ ! -d "$path" ] ; then
    die "There is no repository named \"$repo_name\""
  fi
  
  if ! $force
  then
    echo -n "Delete the \"$repo_name\" repository [y/n]? "
    read answer
  else
    answer=Y
  fi

  if [[ "$answer" =~ [oOyY] ]]
  then
      rm -rf "$path"
  fi
}

action_list() {
  cd $REPO_BASE_DIR && ls -1
}

action_init() {
  mkdir -p $REPO_BASE_DIR
}

get_repos_url() {
  local repo_rw_url=$USER@$(hostname --fqdn):$REPO_BASE_DIR
  echo $repo_rw_url/$1
}

action_show() {
  local repo_name=$1
  fail_if_repo not_exists "$repo_name"

  local repos_url=$(get_repos_url $repo_name)
  cat <<EOF
You can clone it with:

  git clone $repos_url
  git clone $REPO_BASE_DIR/$repo_name

If you already have a local repository, you can push its content with:

  git remote add origin $repos_url
  git push -u origin master
EOF
}

action_env() {
  echo "CONFFILE=$CONFFILE"
  set | grep '^REPO_'
}

################ main ######################

main() {
  loadconf $CONFFILE

	# auto detect action loop
	action="$1"
	shift
	all_func=$(sed -n '/^action_/ s/() {// p' $(readlink -f $0))
	found=0
	for f in $all_func
	do
		if [[ "action_$action" == $f ]]
		then
			# call the matching action with command line parameter
			eval "$f $@"
			found=1
			break
		fi
	done

	if [[ $found -eq 0 ]]
	then
		echo "unknown action: '$action'"
		exit 1
	fi
}

if [[ $sourced -eq 0  ]] ; then 
   main "$@"
fi

